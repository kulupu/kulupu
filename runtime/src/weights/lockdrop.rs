// SPDX-License-Identifier: GPL-3.0-or-later
// This file is part of Kulupu.
//
// Copyright (c) 2021 Wei Tang.
//
// Kulupu is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Kulupu is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Kulupu. If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for lockdrop
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-02-20, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/kulupu
// benchmark
// --chain
// dev
// --steps
// 50
// --repeat
// 20
// --pallet
// lockdrop
// --extrinsic
// *
// --raw
// --execution=wasm
// --wasm-execution=compiled
// --output
// runtime/src/weights/lockdrop.rs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for lockdrop.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> lockdrop::WeightInfo for WeightInfo<T> {
	fn create_campaign() -> Weight {
		(30_100_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn conclude_campaign() -> Weight {
		(77_800_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn remove_expired_child_storage() -> Weight {
		(9_500_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn lock() -> Weight {
		(44_100_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn unlock() -> Weight {
		(7_200_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
}
